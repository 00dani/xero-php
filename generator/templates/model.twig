<?php

namespace XeroPHP\Models\{{ model.Namespace }};

use XeroPHP\Remote;

{% for class in model.UsedClasses %}
use XeroPHP\Models\{{ class }};
{% endfor %}

class {{ model.ClassName }} extends Remote\Object {

{% for property in model.Properties %}
    /**
     * {{ property.Description|wordwrap(100, "\n     * ")|raw }}
     *
     * @property {{ property.PHPType }}{% if property.isArray %}[]{% endif %} {{ property.Name }}
{% if property.isDeprecated %}     * @deprecated
{% endif %}
     */

{% endfor %}

{% for enum in model.Enums %}
{% for enum_value in enum.Values %}
    const {{ enum_value.constant_name }} = '{{ enum_value.value }}'; {% if enum.description %}// {{ enum_value.description }}{% endif %}

{% endfor %}

{% endfor %}

    /*
    * Get the resource uri of the class (Contacts) etc
    */
    public static function getResourceURI(){
        return {% if model.ResourceURI %}'{{ model.ResourceURI }}'{% else %}null{% endif %};
    }


    /*
    * Get the root node name.  Just the unqualified classname
    */
    public static function getRootNodeName(){
        return '{{ model.ClassName }}';
    }


    /*
    * Get the guid property
    */
    public static function getGUIDProperty(){
        return '{{ model.GUIDProperty.Name }}';
    }


    /*
    * Get the stem of the API (core.xro) etc
    */
    public static function getAPIStem(){
        return {% if model.API.StemConstant %}Remote\URL::{{ model.API.StemConstant }}{% else %}null{% endif %};
    }


    /*
    * Get the supported methods
    */
    public static function getSupportedMethods(){
        return array(
{% for method in model.Methods %}
            Remote\Request::METHOD_{{ method }}{% if not loop.last %},{% endif %}

{% endfor %}
        );
    }

    public static function getProperties(){
        return array(
{% for property in model.Properties %}
            '{{ property.name }}'{% if not loop.last %},{% endif %}

{% endfor %}
        );
    }


{#  getters and setters #}
{% for property in model.properties %}
    /**
     * @return {{ property.PHPType }}
     */
    public function get{{ property.Name }}(){
        return $this->_data['{{ property.Name }}'];
    }

    /**
     * @param {{ property.PHPType }}{% if property.isArray %}[]{% endif %} $value
     * @return {{ model.ClassName }}
     */
    public function {% if property.isArray %}add{% else %}set{% endif %}{{ property.NameSingular }}({% if property.isHintable %}{{ property.PHPType }} {% endif %}$value){
        $this->_data['{{ property.Name }}']{% if property.isArray %}[]{% endif %} = $value;
        return $this;
    }

{% endfor %}

}